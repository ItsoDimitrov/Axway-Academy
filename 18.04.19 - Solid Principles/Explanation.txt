Factory Design Pattern 
- Изпозлва се с цел клиентът да не вижда логиката при създаването на инстанция на клас. 

Не е нужно клиентът ( Base class - ът ) да вижда създаването на инстанция на програмен език ( в случая )

При използването на Factory Design Pattern, логиката при създването на обект се прави единствено в този клас
при подадено име на програмен език на static метода " Get Language Instance" от static "FactoryMethod" . 

Когато искаме да създадем нов възможен език е нужно да се направи такъв клас, да наследи интерфейса и да се добави необходимата логика във FactoryMethoda - а.
Клиентът ще използва нашият метод по абстрактен начин ( ще знае че го има, ще знае какво прави, но не го интересува как го прави ) .

За вземането на име на съответния език е използвано " GetType().Name" с цел намаляването на пропуски и грешки при евентуална промяна на името на класа . 

Single Responsibility SOLID Principe 
- Използва се с цел намаляване на сложността на кода . 
В случая - Един метод върши едно нещо, което е и идеята на Single Responsibility принципа . 
Възможно е в метода "AddToShop" проверката за това дали оръжието съществува да се направи в самия метод, но не е добра практика и поради тази причина 
се извиква допълнителен метод, който е в отделен клас .
 
